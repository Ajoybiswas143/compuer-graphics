# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PvPHxx9546eSWV3OSvAEpVBLz2i6UWVw
"""

import matplotlib.pyplot as plt

def dda(x1, y1, x2, y2):
    points = []
    dx = x2 - x1
    dy = y2 - y1
    steps = int(max(abs(dx), abs(dy)))
    x_inc = dx / steps
    y_inc = dy / steps
    x, y = x1, y1
    for _ in range(steps + 1):
        points.append((round(x), round(y)))
        x += x_inc
        y += y_inc
    return points

x1, y1 = 1, 1
x2, y2 = 4, 3
points = dda(x1, y1, x2, y2)
print("Calculated Points (DDA):", points)

plt.figure(figsize=(6,6))
x_vals = [p[0] for p in points]
y_vals = [p[1] for p in points]
plt.plot(x_vals, y_vals, marker='o', color='blue')
plt.title("DDA Line Drawing")
plt.grid(True)
plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt

def bresenham(x1, y1, x2, y2):
    points = []
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    sx = 1 if x2 > x1 else -1
    sy = 1 if y2 > y1 else -1
    err = dx - dy
    while True:
        points.append((x1, y1))
        if x1 == x2 and y1 == y2:
            break
        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x1 += sx
        if e2 < dx:
            err += dx
            y1 += sy
    return points

points = bresenham(9, 18, 14, 22)
print("Calculated Points (Bresenham):", points)

plt.figure(figsize=(6,6))
x_vals = [p[0] for p in points]
y_vals = [p[1] for p in points]
plt.plot(x_vals, y_vals, marker='o', color='green')
plt.title("Bresenham Line Drawing")
plt.grid(True)
plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt

def midpoint_line(x1, y1, x2, y2):
    points = []
    dx = x2 - x1
    dy = y2 - y1
    d = dy - (dx / 2)
    x, y = x1, y1
    points.append((x, y))
    while x < x2:
        x += 1
        if d < 0:
            d = d + dy
        else:
            d = d + (dy - dx)
            y += 1
        points.append((x, y))
    return points

points = midpoint_line(5, 12, 16, 22)
print("Calculated Points (Mid-Point Line):", points)

plt.figure(figsize=(6,6))
x_vals = [p[0] for p in points]
y_vals = [p[1] for p in points]
plt.plot(x_vals, y_vals, marker='o', color='red')
plt.title("Mid-Point Line Drawing")
plt.grid(True)
plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt
import math

def bresenham_circle(xc, yc, r):
    points = []
    x, y = 0, r
    d = 3 - 2 * r
    def plot_circle_points(xc, yc, x, y):
        pts = [(xc+x,yc+y),(xc-x,yc+y),(xc+x,yc-y),(xc-x,yc-y),
               (xc+y,yc+x),(xc-y,yc+x),(xc+y,yc-x),(xc-y,yc-x)]
        for p in pts:
            if p not in points:
                points.append(p)
    while x <= y:
        plot_circle_points(xc, yc, x, y)
        if d < 0:
            d += 4*x + 6
        else:
            d += 4*(x-y) + 10
            y -= 1
        x += 1
    return points

points = bresenham_circle(0, 0, 8)
print("Bresenham Circle Points:", points[:10], "...")

points_sorted = sorted(points, key=lambda p: math.atan2(p[1], p[0]))
x_vals = [p[0] for p in points_sorted] + [points_sorted[0][0]]
y_vals = [p[1] for p in points_sorted] + [points_sorted[0][1]]
plt.figure(figsize=(6,6))
plt.plot(x_vals, y_vals, marker='o', color='purple')
plt.title("Bresenham Circle Drawing")
plt.axis('equal')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import math

def midpoint_circle(xc, yc, r):
    points = []
    x, y = 0, r
    p = 1 - r
    def plot_circle_points(xc, yc, x, y):
        pts = [(xc+x,yc+y),(xc-x,yc+y),(xc+x,yc-y),(xc-x,yc-y),
               (xc+y,yc+x),(xc-y,yc+x),(xc+y,yc-x),(xc-y,yc-x)]
        for pt in pts:
            if pt not in points:
                points.append(pt)
    while x <= y:
        plot_circle_points(xc, yc, x, y)
        if p < 0:
            p += 2*x + 3
        else:
            p += 2*(x-y) + 5
            y -= 1
        x += 1
    return points

points = midpoint_circle(4, 4, 10)
print("Mid-Point Circle Points:", points[:10], "...")

points_sorted = sorted(points, key=lambda p: math.atan2(p[1]-4, p[0]-4))
x_vals = [p[0] for p in points_sorted] + [points_sorted[0][0]]
y_vals = [p[1] for p in points_sorted] + [points_sorted[0][1]]
plt.figure(figsize=(7,7))
plt.plot(x_vals, y_vals, marker='o', color='blue')
plt.title("Mid-Point Circle Drawing")
plt.axis('equal')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

A=(0,3); B=(3,3); C=(3,0); D=(0,0)
tx, ty = 1, 1
A_new=(A[0]+tx,A[1]+ty)
B_new=(B[0]+tx,B[1]+ty)
C_new=(C[0]+tx,C[1]+ty)
D_new=(D[0]+tx,D[1]+ty)

print("New coordinates after translation:")
print(A_new,B_new,C_new,D_new)

orig_x=[A[0],B[0],C[0],D[0],A[0]]
orig_y=[A[1],B[1],C[1],D[1],A[1]]
new_x=[A_new[0],B_new[0],C_new[0],D_new[0],A_new[0]]
new_y=[A_new[1],B_new[1],C_new[1],D_new[1],A_new[1]]
plt.plot(orig_x,orig_y,'b-o',label='Original')
plt.plot(new_x,new_y,'r-o',label='Translated')
plt.legend(); plt.grid(True); plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt

A=(0,3); B=(3,3); C=(3,0); D=(0,0)
sx, sy = 2, 3
A_new=(A[0]*sx,A[1]*sy)
B_new=(B[0]*sx,B[1]*sy)
C_new=(C[0]*sx,C[1]*sy)
D_new=(D[0]*sx,D[1]*sy)

print("New coordinates after scaling:")
print(A_new,B_new,C_new,D_new)

orig_x=[A[0],B[0],C[0],D[0],A[0]]
orig_y=[A[1],B[1],C[1],D[1],A[1]]
new_x=[A_new[0],B_new[0],C_new[0],D_new[0],A_new[0]]
new_y=[A_new[1],B_new[1],C_new[1],D_new[1],A_new[1]]
plt.plot(orig_x,orig_y,'b-o',label='Original')
plt.plot(new_x,new_y,'r-o',label='Scaled')
plt.legend(); plt.grid(True); plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt

A=(0,0); B=(1,0); C=(1,1)
def rotate_90_ccw(x,y): return -y,x

A_new=rotate_90_ccw(*A)
B_new=rotate_90_ccw(*B)
C_new=rotate_90_ccw(*C)
print("New coordinates after rotation:")
print(A_new,B_new,C_new)

orig_x=[A[0],B[0],C[0],A[0]]
orig_y=[A[1],B[1],C[1],A[1]]
new_x=[A_new[0],B_new[0],C_new[0],A_new[0]]
new_y=[A_new[1],B_new[1],C_new[1],A_new[1]]
plt.plot(orig_x,orig_y,'b-o',label='Original')
plt.plot(new_x,new_y,'r-o',label='Rotated')
plt.legend(); plt.grid(True); plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt

A=(3,4); B=(6,4); C=(5,6)
def reflect_x(x,y): return (x,-y)
def reflect_y(x,y): return (-x,y)

A_x,B_x,C_x = reflect_x(*A),reflect_x(*B),reflect_x(*C)
A_y,B_y,C_y = reflect_y(*A),reflect_y(*B),reflect_y(*C)

print("Reflection along X-axis:",A_x,B_x,C_x)
print("Reflection along Y-axis:",A_y,B_y,C_y)

orig_x=[A[0],B[0],C[0],A[0]]
orig_y=[A[1],B[1],C[1],A[1]]
x_x=[A_x[0],B_x[0],C_x[0],A_x[0]]
x_y=[A_x[1],B_x[1],C_x[1],A_x[1]]
y_x=[A_y[0],B_y[0],C_y[0],A_y[0]]
y_y=[A_y[1],B_y[1],C_y[1],A_y[1]]
plt.plot(orig_x,orig_y,'b-o',label='Original')
plt.plot(x_x,x_y,'r-o',label='Reflected X-axis')
plt.plot(y_x,y_y,'g-o',label='Reflected Y-axis')
plt.legend(); plt.grid(True); plt.axis('equal')
plt.show()

import matplotlib.pyplot as plt

O=(0,0); B=(1,0); A=(1,1)
def shear_x(point, shx): return (point[0]+shx*point[1],point[1])
def shear_y(point, shy): return (point[0],point[1]+shy*point[0])

Shx,Shy=2,2
O_x,B_x,A_x = shear_x(O,Shx),shear_x(B,Shx),shear_x(A,Shx)
O_y,B_y,A_y = shear_y(O,Shy),shear_y(B,Shy),shear_y(A,Shy)
print("Shearing X:",O_x,B_x,A_x)
print("Shearing Y:",O_y,B_y,A_y)

orig_x=[O[0],B[0],A[0],O[0]]
orig_y=[O[1],B[1],A[1],O[1]]
sx_x=[O_x[0],B_x[0],A_x[0],O_x[0]]
sx_y=[O_x[1],B_x[1],A_x[1],O_x[1]]
sy_x=[O_y[0],B_y[0],A_y[0],O_y[0]]
sy_y=[O_y[1],B_y[1],A_y[1],O_y[1]]
plt.subplot(1,2,1)
plt.plot(orig_x,orig_y,'b-o',label='Original')
plt.plot(sx_x,sx_y,'r-o',label='Sheared X')
plt.legend(); plt.grid(True); plt.axis('equal')
plt.subplot(1,2,2)
plt.plot(orig_x,orig_y,'b-o',label='Original')
plt.plot(sy_x,sy_y,'r-o',label='Sheared Y')
plt.legend(); plt.grid(True); plt.axis('equal')
plt.show()